DDA Algorithm:

#include <GL/glut.h>
#include <stdlib.h>
#include <iostream>

#define SCREEN_HEIGHT 680
using namespace std;

float x1,x2,y11,y2;
int i = 0;

void display(void)
{
    float dy, dx, step, x, y;
    float X_in,Y_in;
    dx = x2-x1;
    dy = y2-y11;

    if(abs(dx)> abs(dy))
    {
        step = abs(dx);
    }
    else
        step = abs(dy);

    X_in = dx/step;
    Y_in = dy/step;

    x = x1;
    y = y11;
    glBegin(GL_POINTS);
        glVertex2f(x,y);
    glEnd();
    int k;
    for (k=1; k<=step; k++)
    {
        x = x + X_in;
        y = y + Y_in;

        glBegin(GL_POINTS);
            glVertex2f(x,y);
        glEnd();
    }
    glFlush();
}
void init(void)
{
    glClearColor(0.7,0.7,0.7,0.7);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-100,100,-100,100);
}

void mouseFn(int button, int state, int x, int y)
{
    y = 800 - y;
    if(button == GLUT_LEFT && state == GLUT_DOWN)
    {
        if(i==0)
        {
            x1=x;
            y11=y;
            i = i+1;
        }
        else
        {
            x2=x;
            y2=y;
        }
    }
}


int main(int argc, char *argv[])
{

    glutInit(&argc, argv);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(680, 800);
    glutInitWindowPosition(600,50);

    glutCreateWindow("DDA Alg");
    //init();
    glutDisplayFunc(display);
    glutMouseFunc(mouseFn);
    gluOrtho2D(0, 680, 0, 800);
    //glClearColor(0,0,0,0);

    glutMainLoop();
    return EXIT_SUCCESS;
}
--------------------------------------------------------------------------

CLIPPING ALG:
#include<GL/glut.h>

// TBRL
int left = 1,right = 2, top = 8, bottom = 4;
int xmin = 100, xmax = 400, ymin = 100, ymax = 400;
int line_co_ordinate[4],i;
float x1=200, y11=250, x2=450,y2=450;
int c1,c2;
int flag = 1,clip_flag=0;


void myInit()
{
    glClearColor(1.0, 1.0, 1.0, 0);
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0.0, 0.0, 1.0);
    gluOrtho2D(0, 500,0, 500);
    glFlush();
}

int getCode(int x, int y)
{
    int code = 0;

    if(x < xmin)
    {
        code = code | left;
    }

    if(x > xmax)
    {
        code = code | right;
    }

    if(y < ymin)
    {
        code = code | bottom;
    }

    if(y > ymax)
    {
        code = code | top;
    }

    return code;
}


void clip()
{
    int c;
    float x,y;
    float m = (y2-y11)/(x2-x1);
    if(c1)
    {
        c = c1;
    }
    else
    {
        c = c2;
    }

    if( c & left)
    {
        x = xmin;
        y = y11 + m*(xmin - x1) ;
    }

    if( c & right)
    {
        x = xmax;
        y = m*(xmax - x1) + y11;
    }

    if( c & top)
    {
        y = ymax;
        x = ((ymax - y11)/m) + x1;
    }

    if( c & bottom)
    {
        y = ymin;
        x = ((ymin - y11)/m) + x1;
    }

    if(c == c1)
    {
        x1 = x;
        y11 = y;
    }
    else
    {
        x2 = x;
        y2 = y;
    }

}

void display()
{

    glClear(GL_COLOR_BUFFER_BIT); //clearing buffer
    glColor3f(1.0, 0.0, 0.0);     //assigning color
    glPointSize(4);
    glBegin(GL_LINE_LOOP);
        glVertex2f(xmin,ymin);
        glVertex2f(xmax,ymin);
        glVertex2f(xmax,ymax);
        glVertex2f(xmin,ymax);
    glEnd();

    if(flag == 1)
    {
        glBegin(GL_LINES);
        glVertex2f(x1,y11);
        glVertex2f(x2,y2);
        glEnd();
    }

    while(1 & clip_flag == 1)
   {
        c1 = getCode(x1,y11);

        c2 = getCode(x2,y2);

        // Line both point inside
        if((c1 | c2)==0)
        break;

        // Line both point outside
        else if((c1&c2) != 0)
        {
            flag = 0;
        break;
        }

        else
        {
        clip();
        }


    }
    glFlush();
}


// Keyboard Func
void Key(unsigned char ch,int x,int y)
{
        if(ch=='c')
        {
            clip_flag = 1;

             glutPostRedisplay();
    }
}

// Mouse Func
void mouse_input(int button,int state,int x,int y)
{
    if(button == GLUT_LEFT_BUTTON && state == GLUT_DOWN && i < 4)
    {
        line_co_ordinate[i] = x;
        i=i+1;
        line_co_ordinate[i] = 500-y;
        i++;
    }
    if(i==4)
    {
        i=0;
        x1 = line_co_ordinate[0];
        y11 = line_co_ordinate[1];
        x2 = line_co_ordinate[2];
        y2 = line_co_ordinate[3];

        display();
    }
}


int main(int argc,char **argv)
{
    glutInit(&argc,argv);
    glutInitWindowPosition(100,100);
    glutInitWindowSize(500,500);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutCreateWindow("Cohen Suderland");
    myInit();
    glutDisplayFunc(display);
    glutKeyboardFunc(Key);
    glutMouseFunc(mouse_input);
    glutMainLoop();
    return 0;
}
--------------------------------------------------------------------------
MENU DRIVEN :

#include <GL/glut.h>
#include <iostream>
#include <vector>
#include <math.h>

using namespace std;

vector<int>pX;
vector<int>pY;
int tx, ty;
int i=0;
struct GLColor {
GLfloat red;
GLfloat green;
GLfloat blue;
};
GLColor colors[6] = {
{0.0f, 0.0f, 0.0f}, // Black
{1.0f, 0.0f, 0.0f}, // Red
{0.0f, 1.0f, 0.0f}, // Green
{0.0f, 0.0f, 1.0f}, // Blue
{1.0f, 1.0f, 0.0f}, // Yellow
{1.0f, 0.0f, 1.0f} // Purple
};
GLColor color = colors[0]; // Default: Black
void init() {

	glClearColor(1.0f, 1.0f, 1.0f, 0);
	glColor3f(color.red, color.green, color.blue);
	glPointSize(1.0f);
	glMatrixMode(GL_PROJECTION);
	gluOrtho2D(0,640,0,480);
}
void drawAxis()
{
	glColor3f(0.0, 0.0, 0.0);
	glBegin(GL_LINES);
	//glColor3f(0.1, 0.2, 0.3);
	glVertex2f(0, 240);
	glVertex2f(640, 240);
	glVertex2f(320, 0);
	glVertex2f(320, 480);
	glEnd();
	glFlush();
}

void drawPolygon() {
	drawAxis();
	if (i>=4)
	{
	glColor3f(0.0, 0.0, 1.0);
	glBegin(GL_POLYGON); // Draw A Quad
	for(int i=0; i<4; i++)
	{
	glVertex2i(pX[i], pY[i]);
	}
	glEnd();
	}
}

void mouseFn(int button, int state, int x, int y)
{
	y = 480 - y;
	if(button == GLUT_LEFT && state == GLUT_DOWN)
	{
		if(i<4)
		{
		pX.push_back(x);
		pY.push_back(y);
		i++;
		}
	}
	drawPolygon();
}
void display(void) {
	glClear(GL_COLOR_BUFFER_BIT);
	glBegin(GL_LINES);
	//glColor3f(0.1, 0.2, 0.3);
	glVertex2f(0, 240);
	glVertex2f(640, 240);
	glVertex2f(320, 0);
	glVertex2f(320, 480);
	glEnd();
	glFlush();
}
void transPolygon()
{
	glClear(GL_COLOR_BUFFER_BIT);
	drawPolygon();
	drawAxis();
	glColor3f(0.0, 1.0, 0.0);
	glBegin(GL_POLYGON); // Draw A Quad
	cout<< "Enter Translation Factors tx, ty "<<endl;

	cin >> tx >> ty;
	for(int i=0; i<4; i++)
	{
	glVertex2i(pX[i]+tx, pY[i]+ty);
	}
	glEnd();
	}
	int roundint(double x)
	{
	return (int)floor(x+0.5);
}
void rotatePolygon()
{
	glClear(GL_COLOR_BUFFER_BIT);
	drawPolygon();
	drawAxis();
	glColor3f(1.0, 0.0, 0.0);
	glBegin(GL_POLYGON);
	for(int i=0; i<4; i++)
	{
	int xn=pX[i]-320;
	int yn=pY[i]-240;
	glVertex2i(320+roundint(xn*cos(1)- yn*sin(1)), 240+roundint(xn*sin(1) + yn*cos(1)));
	}
	glEnd();
}
void scalePolygon()
{
	glClear(GL_COLOR_BUFFER_BIT);
	drawPolygon();
	drawAxis();
	glColor3f(1.0, 0.0, 1.0);
	int sx, sy;

	cout<< "Enter Scaling Factors sx, sy "<<endl;
	cin >> sx >> sy;
	glBegin(GL_POLYGON);
	int xn=pX[0];
	int yn=pY[0];
	for(int i=0; i<4; i++)
	{
	glVertex2i(xn+(pX[i]-xn)*sx, yn+(pY[i]-yn)*sy);
	}
	glEnd();
}
void reflectPoly()
{
	glClear(GL_COLOR_BUFFER_BIT);
	drawPolygon();
	drawAxis();
	glColor3f(1.0, 0.0, 1.0);
	int reflectAxis;
	cout << "Enter (0 for x/1 for y) axis to reflect about : "<< endl;
	cin>>reflectAxis;
	glBegin(GL_POLYGON);
	for(int i=0; i<4; i++)
	{
	if(reflectAxis == 0)
	{
	glVertex2i(pX[i], 240-(pY[i]-240));
	}
	else if (reflectAxis == 1)
	{
	glVertex2i(320-(pX[i]-320), pY[i]);
	}
	else
	{
	glVertex2i(320-(pX[i]-320),240-(pY[i]-240));
	}

	}
	glEnd();
}
void mainMenuHandler(int choice) { // Transformations
	switch(choice) {
		case 1: // Translate
		transPolygon();
		break;
		case 2: // Rotate
		rotatePolygon();
		break;
		case 3: // Scaling
		scalePolygon();
		break;
		case 4: // Reflect
		reflectPoly();
		break;
		case 5: // Exit
		exit(0);
		break;
	}
}
int main(int argc, char **argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
	glutInitWindowPosition(200, 200);
	glutInitWindowSize(640, 480);
	glutCreateWindow("OpenGL Menus");
	glutDisplayFunc(display);

	init();
	glutMouseFunc(mouseFn);
	glutCreateMenu(mainMenuHandler);
	glutAddMenuEntry("Translate", 1);
	glutAddMenuEntry("Rotate", 2);
	glutAddMenuEntry("Scaling", 3);
	glutAddMenuEntry("Reflect (Flip)", 4);
	glutAddMenuEntry("Exit", 5);
	glutAttachMenu(GLUT_RIGHT_BUTTON);
	glutMainLoop();
	return 0;
}

--------------------------------------------------------------------------
MOUSE DRAGGING :

#include <GL/glut.h>
#include <stdlib.h>
#include<iostream>
#include <vector>

#define SCREEN_HEIGHT 480

using namespace std;

vector<pair<int, int> > points;

void init()
{
    glClearColor(0, 0, 0, 1);
    //glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, 640, 0, 480);
}
static void display(void){
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1, 0, 0);
    glBegin(GL_POINTS);
        for(int i=0;i<points.size();i++)
        {
            glVertex2f(points[i].first, points[i].second);
        }
    glEnd();
    glFlush();
}
void mouseMove(int x, int y) {
        y = SCREEN_HEIGHT-y;
        cout << "Xcoord : " << x << " YCoord : "<< y << endl;
        points.push_back(make_pair(x, y));
        glutPostRedisplay();
}

int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
    glutInitWindowSize(640,480);
    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);

    glutCreateWindow("GLUT Shapes");

    glutDisplayFunc(display);
    init();
    glutMotionFunc(mouseMove);
    //glutPassiveMotionFunc(mouseMove);
    glClearColor(0,0,0,1);

    glutMainLoop();

    return EXIT_SUCCESS;
}
