#include<GL/glut.h>
#include<iostream>
#include <math.h>
#include <vector>

using namespace std;

int i = 0;

vector<int>pX;
vector<int>pY;

void init()
{
	glClearColor(1.0f, 1.0f, 1.0f, 0);
	glClear(GL_COLOR_BUFFER_BIT);
	glPointSize(4.0);
	glMatrixMode(GL_PROJECTION);
	gluOrtho2D(0,640,0,480);
	glFlush();
}

void drawPixel(int x,int y)
{
    glColor3d(1,0,0);
    glPointSize(3.0);
    glBegin(GL_POINTS);
        glVertex2d(x,y);
    glEnd();
    glFlush();
}
void drawCurve()
{
	float u,x,y;
	drawPixel(pX[0],pY[0]);
	drawPixel(pX[3],pY[3]);
	for (u=0.001;u<1;u=u+0.001)
	{
		x=(1-u)*(1-u)*(1-u)*pX[0]+3*(1-u)*(1-u)*u*pX[1]+3*u*u*(1-u)*pX[2]+u*u*u*pX[3];
		y=(1-u)*(1-u)*(1-u)*pY[0]+3*(1-u)*(1-u)*u*pY[1]+3*u*u*(1-u)*pY[2]+u*u*u*pY[3];
		drawPixel(x,y);
	}

}

void display()
{
	//glFlush();
}

void mouseFn(int button, int state, int x, int y)
{
	if(i<4)
	{
		y = 480 - y;
		if(button == GLUT_DOWN && state == GLUT_DOWN)
		{
			pX.push_back(x);
			pY.push_back(y);
			i++;
			drawPixel(x, y);
			cout<<"Control point "<<i<<" : "<<x<<" "<<y<<endl;
		}
	}
	else
	{
		drawCurve();
	}
}

int main(int argc, char **argv)
{
	glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
    glutInitWindowPosition(200, 200);
    glutInitWindowSize(640, 480);
    glutCreateWindow("Bezier Curve");
    glutDisplayFunc(display);
    init();
    
    glutMouseFunc(mouseFn);
    glutMainLoop();

    return 0;
}


